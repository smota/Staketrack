name: Firebase Deployment

on:
  push:
    branches: 
      - main
      - development
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment Environment'
        required: true
        default: 'DEV'
        type: choice
        options:
          - DEV
          - PRD
      deploy_option:
        description: 'Deployment Option'
        required: true
        default: 'hosting'
        type: choice
        options:
          - hosting
          - firestore
          - functions
          - storage
          - rules
          - all

jobs:
  deploy_dev:
    name: Deploy to Development
    if: github.ref == 'refs/heads/development' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'DEV')
    runs-on: ubuntu-latest
    environment: development
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Create .env.development file
        run: |
          echo "NODE_ENV=development" > .env.development
          echo "APP_VERSION=1.0.0" >> .env.development
          echo "APP_ENVIRONMENT=DEV" >> .env.development
          echo "APP_USE_EMULATORS=false" >> .env.development
          echo "APP_ENABLE_ANALYTICS=false" >> .env.development
          echo "APP_API_BASE_URL=https://us-central1-${{ secrets.FIREBASE_PROJECT_ID }}.cloudfunctions.net" >> .env.development
          echo "APP_FIREBASE_AUTH_DOMAIN=${{ secrets.FIREBASE_AUTH_DOMAIN }}" >> .env.development
          echo "APP_FIREBASE_PROJECT_ID=${{ secrets.FIREBASE_PROJECT_ID }}" >> .env.development
          echo "APP_FIREBASE_STORAGE_BUCKET=${{ secrets.FIREBASE_STORAGE_BUCKET }}" >> .env.development
          echo "APP_ANTHROPIC_API_ENDPOINT=${{ secrets.ANTHROPIC_API_ENDPOINT }}" >> .env.development
        
      - name: Setup Firebase tools
        run: npm install -g firebase-tools
      
      - name: Authenticate with Firebase
        env:
          FIREBASE_TOKEN: ${{ secrets.FIREBASE_TOKEN }}
        run: firebase use development --token $FIREBASE_TOKEN
      
      - name: Initialize Firebase Functions
        env:
          FIREBASE_TOKEN: ${{ secrets.FIREBASE_TOKEN }}
        run: npm run firebase:init-functions:dev -- --no-confirm
      
      - name: Update Firebase Functions Configuration
        env:
          FIREBASE_TOKEN: ${{ secrets.FIREBASE_TOKEN }}
        run: npm run firebase:update-config:dev -- --no-confirm
      
      - name: Build for development
        run: npm run build:dev
      
      - name: Deploy to Firebase
        env:
          FIREBASE_TOKEN: ${{ secrets.FIREBASE_TOKEN }}
          FIREBASE_PROJECT_ID: ${{ secrets.FIREBASE_PROJECT_ID }}
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            OPTION="${{ github.event.inputs.deploy_option }}"
            if [[ "$OPTION" == "all" ]]; then
              firebase deploy --project $FIREBASE_PROJECT_ID --token $FIREBASE_TOKEN --target development
            else
              firebase deploy --project $FIREBASE_PROJECT_ID --token $FIREBASE_TOKEN --only $OPTION --target development
            fi
          else
            firebase deploy --project $FIREBASE_PROJECT_ID --token $FIREBASE_TOKEN --target development
          fi
          
  deploy_prod:
    name: Deploy to Production
    if: github.ref == 'refs/heads/main' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'PRD')
    runs-on: ubuntu-latest
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Create .env.production file
        run: |
          echo "NODE_ENV=production" > .env.production
          echo "APP_VERSION=1.0.0" >> .env.production
          echo "APP_ENVIRONMENT=PRD" >> .env.production
          echo "APP_USE_EMULATORS=false" >> .env.production
          echo "APP_ENABLE_ANALYTICS=true" >> .env.production
          echo "APP_API_BASE_URL=https://us-central1-${{ secrets.FIREBASE_PROJECT_ID }}.cloudfunctions.net" >> .env.production
          echo "APP_FIREBASE_AUTH_DOMAIN=${{ secrets.FIREBASE_AUTH_DOMAIN }}" >> .env.production
          echo "APP_FIREBASE_PROJECT_ID=${{ secrets.FIREBASE_PROJECT_ID }}" >> .env.production
          echo "APP_FIREBASE_STORAGE_BUCKET=${{ secrets.FIREBASE_STORAGE_BUCKET }}" >> .env.production
          echo "APP_ANTHROPIC_API_ENDPOINT=${{ secrets.ANTHROPIC_API_ENDPOINT }}" >> .env.production
        
      - name: Setup Firebase tools
        run: npm install -g firebase-tools
      
      - name: Authenticate with Firebase
        env:
          FIREBASE_TOKEN: ${{ secrets.FIREBASE_TOKEN }}
        run: firebase use production --token $FIREBASE_TOKEN

      - name: Initialize Firebase Functions
        env:
          FIREBASE_TOKEN: ${{ secrets.FIREBASE_TOKEN }}
        run: npm run firebase:init-functions:prod -- --no-confirm

      - name: Update Firebase Functions Configuration
        env:
          FIREBASE_TOKEN: ${{ secrets.FIREBASE_TOKEN }}
        run: npm run firebase:update-config:prod -- --no-confirm
      
      - name: Build for production
        run: npm run build:prod
      
      - name: Deploy to Firebase
        env:
          FIREBASE_TOKEN: ${{ secrets.FIREBASE_TOKEN }}
          FIREBASE_PROJECT_ID: ${{ secrets.FIREBASE_PROJECT_ID }}
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            OPTION="${{ github.event.inputs.deploy_option }}"
            if [[ "$OPTION" == "all" ]]; then
              firebase deploy --project $FIREBASE_PROJECT_ID --token $FIREBASE_TOKEN --target production
            else
              firebase deploy --project $FIREBASE_PROJECT_ID --token $FIREBASE_TOKEN --only $OPTION --target production
            fi
          else
            firebase deploy --project $FIREBASE_PROJECT_ID --token $FIREBASE_TOKEN --target production
          fi 